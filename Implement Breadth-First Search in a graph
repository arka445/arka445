#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Function to perform BFS on a graph
void BFS(int startNode, const vector<vector<int>>& adjList) {
    int n = adjList.size();
    vector<bool> visited(n, false);  // To keep track of visited nodes
    queue<int> q;  // Queue to manage the BFS traversal order

    visited[startNode] = true;  // Mark the start node as visited
    q.push(startNode);  // Enqueue the start node

    while (!q.empty()) {
        int currentNode = q.front();  // Get the node at the front of the queue
        q.pop();  // Remove the node from the queue

        cout << "Visited node: " << currentNode << endl;

        // Traverse all the adjacent nodes of the current node
        for (int neighbor : adjList[currentNode]) {
            if (!visited[neighbor]) {  // If the node hasn't been visited yet
                visited[neighbor] = true;  // Mark it as visited
                q.push(neighbor);  // Enqueue the node
            }
        }
    }
}

int main() {
    int n, e;
    cout << "Enter the number of nodes in the graph: ";
    cin >> n;
    cout << "Enter the number of edges in the graph: ";
    cin >> e;

    // Create an adjacency list to represent the graph
    vector<vector<int>> adjList(n);

    cout << "Enter the edges (u v) for the graph (0-based index):" << endl;
    for (int i = 0; i < e; i++) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);  // For undirected graph; omit this line for directed graph
    }

    int startNode;
    cout << "Enter the starting node for BFS (0-based index): ";
    cin >> startNode;

    cout << "BFS traversal starting from node " << startNode << ":" << endl;
    BFS(startNode, adjList);

    return 0;
}
