#include <iostream>
#include <stack>
#include <vector>

using namespace std;

// Function to swap two elements
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Partition function for Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // Choose the rightmost element as the pivot
    int i = low - 1; // Index of smaller element

    for (int j = low; j <= high - 1; ++j) {
        if (arr[j] <= pivot) {
            ++i; // Increment index of smaller element
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// Iterative Quick Sort function
void quickSort(vector<int>& arr, int low, int high) {
    // Create an explicit stack for managing subarray bounds
    stack<pair<int, int>> stack;
    stack.push(make_pair(low, high));

    while (!stack.empty()) {
        // Pop a pair of bounds from the stack
        auto [low, high] = stack.top();
        stack.pop();

        if (low < high) {
            // Partition the array
            int p = partition(arr, low, high);

            // Push the bounds of the left and right subarrays to the stack
            if (p - 1 > low) {
                stack.push(make_pair(low, p - 1));
            }
            if (p + 1 < high) {
                stack.push(make_pair(p + 1, high));
            }
        }
    }
}

int main() {
    vector<int> arr;
    int n;

    cout << "Enter the number of elements: ";
    cin >> n;

    arr.resize(n);
    cout << "Enter the elements of the array:\n";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    quickSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
