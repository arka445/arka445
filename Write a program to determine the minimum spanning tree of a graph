#include <iostream>
#include <vector>
#include <climits>  // For INT_MAX

using namespace std;

// Function to find the vertex with the minimum key value that is not yet included in the MST
int findMinKeyVertex(const vector<int>& key, const vector<bool>& inMST, int V) {
    int min = INT_MAX;
    int minIndex = -1;

    for (int v = 0; v < V; ++v) {
        if (!inMST[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Function to print the edges of the MST and their weights
void printMST(const vector<int>& parent, const vector<vector<int>>& graph) {
    int V = graph.size();
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; ++i) {
        cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << " \n";
    }
}

// Function to construct and print MST using Prim's algorithm
void primMST(const vector<vector<int>>& graph) {
    int V = graph.size();
    vector<int> parent(V, -1);    // Array to store constructed MST
    vector<int> key(V, INT_MAX);  // Key values used to pick minimum weight edge in cut
    vector<bool> inMST(V, false); // To represent set of vertices included in MST

    // Initialize the first vertex key as 0 so that it is picked first
    key[0] = 0;
    parent[0] = -1; // First node is always the root of the MST

    for (int count = 0; count < V - 1; ++count) {
        // Pick the minimum key vertex from the set of vertices not yet included in MST
        int u = findMinKeyVertex(key, inMST, V);

        inMST[u] = true; // Add the picked vertex to the MST set

        // Update key value and parent index of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; ++v) {
            if (graph[u][v] && !inMST[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the constructed MST
    printMST(parent, graph);
}

int main() {
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V, 0));

    cout << "Enter the adjacency matrix for the graph (0 for no edge):\n";
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
        }
    }

    // Function call to find the MST using Prim's algorithm
    primMST(graph);

    return 0;
}
